// Code generated by go-bindata.
// sources:
// db/migration/000001_init_schema.down.sql
// db/migration/000001_init_schema.up.sql
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000001_init_schemaDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\x2d\x4e\x2d\x8a\x2f\xa9\x2c\x48\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\xb6\xe6\x42\x92\x4f\x4e\x2c\x49\x4d\xcf\x2f\xca\x4c\x2d\xc6\xa1\x00\x64\x00\x2e\xb9\x82\xfc\xe2\x92\x62\x85\xcc\x34\x5c\x72\xf1\x99\x79\xf1\x50\x0b\x2a\x71\xd9\x9f\x9f\x9b\x9b\x9a\x57\x82\xcb\x86\xb2\xfc\x12\x5c\x2e\x4f\x4f\xcd\x4b\xc1\xe2\x37\x5d\x5d\x05\x24\x45\x45\xa9\x05\xf9\x45\x25\xb8\xe5\x4b\x0b\xd2\x8b\x12\x53\x52\xe3\x8b\x52\x0b\x4b\x53\x8b\x91\x14\x72\x01\x02\x00\x00\xff\xff\x07\x0d\x9b\xc8\x44\x01\x00\x00")

func _000001_init_schemaDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_init_schemaDownSql,
		"000001_init_schema.down.sql",
	)
}

func _000001_init_schemaDownSql() (*asset, error) {
	bytes, err := _000001_init_schemaDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_init_schema.down.sql", size: 324, mode: os.FileMode(420), modTime: time.Unix(1662298825, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000001_init_schemaUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x59\xcd\x72\xe3\xb8\x11\x3e\x93\x4f\xd1\xd1\x49\xaa\x22\x77\xc7\xc9\x9e\x32\x87\x2d\xd9\xa6\x1d\xed\xda\xf2\x44\xa2\x53\xbb\x27\x17\x4c\xb6\x64\x44\x24\xc0\x10\xa0\x76\xfd\x3e\xf3\x0c\x39\xe5\xe6\x17\x4b\x01\x20\x45\xf0\x57\x96\xc7\xf3\x73\xb2\x80\x46\x77\xe3\xeb\xaf\x9b\x8d\x1e\xdf\x87\x8b\x55\x30\x0f\x03\x08\xe7\xe7\x37\x01\x2c\xae\x60\x79\x17\x42\xf0\xdb\x62\x1d\xae\xa1\x10\x98\x3f\xc8\xe7\x0c\xa7\xae\xef\x83\xe3\xd0\x18\x28\x93\xb8\xc5\x1c\x3e\xad\x16\xb7\xf3\xd5\xef\xf0\x6b\xf0\xbb\x3e\xb1\xbc\xbf\xb9\xf1\x8c\x14\x23\x29\x82\xc4\x3f\x25\xdc\x2f\x17\xff\xbc\x0f\xda\xfb\x31\x8a\x28\xa7\x99\xa4\x9c\x69\x31\xb3\x3a\xfb\xe8\xba\xc7\xbd\x01\xed\xc9\x6b\xfc\x50\xd2\xc3\x9e\x80\x12\xc1\x94\xd0\x64\x60\x5f\x0b\x3c\x11\xf1\x84\xf1\x43\x46\x84\xf8\x83\xe7\x31\x9c\xdf\xdc\x9d\xb7\x74\x48\xbe\x43\xd6\xb7\x41\x0a\xf9\xf4\x50\xef\x6a\x9f\xb2\x9c\xef\x69\x8c\xb9\xb6\xe9\x81\xef\xef\x0a\x0a\x2f\xff\xdb\x09\x50\x50\xbc\x7c\xa6\x31\xca\x22\xf6\x20\x43\xf2\x08\x12\x29\x43\xd8\x11\xe0\x09\xa6\xe4\x2f\x70\x4b\x05\x44\x9c\x09\x99\x13\xca\x24\x64\x84\x31\xf2\xf3\xcf\x4a\x6d\x94\x23\x91\x18\x43\x4c\x24\x4a\x9a\x62\x0b\x88\x2c\x6e\xec\xea\x45\x15\xd4\x07\x0b\xc6\xea\x04\x5c\x06\x57\xf3\xfb\x9b\x10\xce\xb4\x98\xef\xc3\x99\xf2\x66\x27\x40\x50\x2a\x8c\x2b\xc0\x5e\xfe\x0b\x92\xec\x89\x0e\x88\x0f\x46\x50\x48\x0f\x50\x82\xba\x11\x15\x08\x94\x65\x85\xa4\x80\x14\x94\x9f\x5e\x79\x9c\xc1\x9e\x24\x05\x2a\x70\x78\x4a\x88\x14\x98\x48\x98\x9c\x4d\x94\x8a\xab\xbb\x55\xb0\xb8\x5e\xaa\x48\x4e\x4b\xf7\x66\x6a\x5d\xfd\x5b\x05\x57\xc1\x2a\x58\x5e\x04\x36\x27\x69\x3c\x83\x4a\x40\xfd\xbb\x5b\xc2\x65\x70\x13\x84\x01\xac\x83\xf0\x70\x11\xdf\xd7\x3e\x1d\x8e\xc1\xae\x10\xb2\x90\xca\x76\xe9\x55\x5a\x14\x31\x4a\xb2\x13\x08\x31\x6e\x48\x91\xc8\xd2\xcb\x0c\x49\x82\xca\x82\xe2\xe6\x11\x72\x66\x5c\xc8\x93\xb8\xd9\x87\xbe\x09\x0d\x95\x49\xc9\xda\xc6\x7a\xc4\x99\x44\x26\x7b\x76\x12\xba\x43\x51\x29\xd3\x2b\x31\x15\xdd\xc5\x71\x9a\xd8\xf0\x97\xfe\xd5\xf0\xb6\xf0\x9f\x5a\xa1\xe9\xa2\x7f\x31\x5f\x5f\xcc\x2f\x83\x0a\xf9\x1d\x11\x85\x24\xff\x26\x07\xe0\x15\xd2\x9e\xf9\xb5\x27\xb1\x62\xb8\xc4\x94\x6c\x09\x08\xe4\xb2\x88\x35\x94\x54\x16\x02\xe3\x0a\x7b\xc3\xc4\x06\xfa\x4a\xe8\x21\x22\x12\xb7\x3c\x7f\x9e\x96\x12\xaf\xc1\xde\xf7\xa1\x2e\x0b\xd5\x4e\xb9\x31\x73\x87\x6d\x51\xf6\x56\x73\xe6\xf8\x40\xb4\x55\x5c\x4a\xb5\x63\x32\x76\x74\x4a\x7d\xb3\x32\xf1\xda\x01\xd2\x4c\x2c\x03\x74\x2c\x46\x7d\xea\x2d\x77\xc6\x4c\xd4\x68\xbc\xd2\x56\x8d\x71\x0f\xc4\x11\x4f\x53\x64\xf2\x9d\x91\x1d\xcd\xb3\xd1\x94\xea\xcd\xaa\xa1\xc4\x3a\x9a\x5b\x63\xe9\x35\x9e\x61\x47\x03\x68\x67\x19\x39\x29\xcd\x76\x06\x72\x42\x72\x1a\x7f\x5d\x96\x55\xa1\xd2\x49\x5d\xf9\x97\x52\x81\x49\xc3\x59\xe5\x62\xc7\xb7\xf1\xcc\xdc\x73\x89\x27\x72\xe6\x18\x27\x5a\x9c\xaa\xa9\xa2\x3d\xea\xd9\xd1\x1f\x95\x47\xce\x13\xab\x01\xf0\x7d\xd8\x90\x44\xe0\xf4\xc3\x0c\x36\x3c\xaf\x68\x03\x84\xc5\x20\xf3\x02\xa7\x67\x66\x9d\x68\x96\xbd\x85\x43\xb5\x3f\x43\x11\xaa\x52\xea\x24\x26\xd5\x9c\xe8\x89\x53\x49\xa3\x32\x46\x4f\x2f\x9f\x5f\x3e\x27\x38\xc6\x9d\x77\x28\x50\xa7\x73\x67\xc4\xaf\x77\x4c\xbc\x8a\x8d\xff\x08\x2e\x7e\xad\xee\x5b\x77\x51\xf3\xe5\x65\x83\x31\xc2\x2c\x97\x87\xee\x56\x35\xcb\x44\xef\x81\x4a\xd1\xc1\x53\x8b\x98\x8a\x43\xb5\xe8\xdf\x81\xb3\xe4\x19\x38\x43\xe0\x1b\x90\x4f\x28\x10\x22\x9e\xa4\x05\x53\x8d\x8d\x90\xf0\x88\xb0\xa1\x49\x8d\xc7\x40\x26\xe5\x98\xf1\xfc\xbd\xeb\xaf\x51\x6a\xf2\xad\x53\x7b\x8f\xb1\x9d\xc4\x29\x65\x3d\xf9\x46\xa2\x08\x33\x75\x52\xe5\x5c\x6d\x89\x44\x9d\x26\xb7\x15\x7d\xcb\x9b\xef\x56\x7a\x09\xd1\x2d\x3e\xe4\x44\xf9\xf2\xb5\x0b\xef\x1b\xb2\x67\xc4\xb1\x2a\x20\x5f\x04\x9e\x6a\xcd\x35\xe3\xab\x08\xb7\x0a\x8d\x09\x92\x7e\x38\x1c\x3c\x1c\x67\x6e\x91\x6d\x73\x12\xe3\x43\x8e\xff\x29\x50\x9c\x4a\xe1\xf2\x94\xe1\x68\xe7\x15\xa8\x1e\x89\x54\x45\x0d\x78\x92\x10\x48\xa9\x2c\x64\xdb\x20\xfd\x8e\x84\xae\x7d\xff\x76\x8c\x7e\x54\x6c\x69\x61\xf0\xfd\xd8\x62\x42\xd0\xa0\x0b\x8c\x76\x9a\x8c\x4b\xba\xa1\x11\x91\x94\xb3\x77\x6e\x1d\x54\x37\x72\x52\xeb\x60\xc8\xde\xb3\x51\xc1\xdb\xdd\x11\x88\xac\xd9\x6d\x1c\x5e\xba\xba\xe3\xf8\x36\xbd\x42\x8f\x91\xf2\xf2\x43\x16\x74\xa7\xf6\x05\xea\x0f\x50\x0d\x19\x28\x3f\x60\x5f\x60\xa2\x06\x7d\x90\xb3\x46\xe2\x54\x23\xa6\x49\xa8\xd8\x31\xd4\x24\x2c\xd6\xf5\x72\x4d\x0c\x7b\xd5\x62\x45\xb9\x5c\x37\x14\x95\x76\x5b\xbe\xa7\xa1\xf8\x3a\xda\xfb\x5d\x6f\xd8\x7c\x77\xed\x03\xae\x77\x3a\x27\xf5\xd5\x78\xdd\x88\xf3\xf8\x78\x73\x6c\xb4\xd9\x1d\x6b\xce\x3e\x8e\x5a\x2e\xdf\xcf\x14\x05\x4c\x5d\xc7\x4c\x7d\xc2\xe0\xb7\xb0\xd7\x76\x69\xaf\x65\x46\x8b\x5b\x2e\x54\x9f\xa0\xcb\x79\x18\x84\x8b\xdb\xe0\x98\x0b\x5b\x64\x71\x35\x16\xfb\x3a\xf7\x5f\x2c\xd7\xc1\x2a\x84\xc5\x32\xbc\x6b\x5a\xa3\xb1\xa7\xe7\x30\x33\xf7\x5f\xf3\x9b\xfb\x60\x0d\xd3\x0f\x1e\x4c\xae\x30\x25\x09\x4e\x66\x9e\x3b\x3d\xf3\x60\x72\x5b\xfd\xf8\xab\x07\x93\x25\x67\xfe\x39\x65\x24\x7f\xd6\x4b\x7f\xf3\x60\x72\xcf\x76\x8c\xff\xc1\xf4\xef\x9f\xf4\xef\x18\x37\x94\x61\x3c\x39\x72\x71\x15\x75\x0d\xfb\x61\x4a\x3c\x0e\xfa\x86\x1b\xa9\x06\xe0\x87\xc2\x3b\x29\xb7\x27\x9e\xeb\x88\x62\x54\xb2\xdc\x56\x92\x64\x8b\xc3\xe3\xd7\x0f\x9e\xeb\x94\x78\x8d\x4d\x69\x7f\xf2\x1c\xd7\x31\x63\xec\xa6\xc1\x83\xe7\xe3\x23\x6c\xd7\xe9\x9b\x5f\x77\x89\xe4\xb9\x4e\x35\x46\xb6\x96\x38\x4b\x28\x1b\xbd\x04\xb8\x8e\x5d\x61\x0f\x37\x9a\xb9\x8e\x63\xd5\x55\x8b\x19\x66\xaa\xeb\x38\xce\xdb\xa6\xb9\xc7\x18\xaf\x9a\x61\x51\x72\x7d\xb1\x0c\x83\xeb\x60\x65\x87\xde\x6b\x24\xa2\x0d\x48\x39\x29\x6a\xaf\xab\xd2\x25\x2a\x4d\xfd\xc0\xd1\x94\x6c\x51\xe4\x91\x3e\xeb\x19\xca\x75\xf4\x58\x28\x81\x7e\xa6\xce\xda\xbd\x92\x30\xeb\x26\x67\x5e\x71\xcb\xc3\x7c\x6e\xf4\xb6\xd5\x0b\xce\xba\x81\x35\x8d\x2c\x3d\x6e\x38\xd7\x18\x0f\xda\x2d\x84\x55\xce\x34\x86\xb3\xd6\xc1\xc3\xbb\xa6\xf5\x98\x11\xa0\xbf\xa7\x7a\xc6\x3e\x56\x2e\xcd\x07\x61\x3c\x78\xad\xeb\xd8\x08\x57\xcd\xdb\x3b\x46\xb6\x13\xb4\xf6\xf5\x3a\x71\x3b\x19\x91\x11\x40\xcc\xec\xeb\x15\x45\xbb\xfd\x4a\xb7\x6b\x4c\xb7\x37\x6d\x6c\x1f\x66\x5b\x16\x00\x3d\xef\x9b\x03\xb8\xad\x41\x6a\x3f\x42\xcd\xdc\xd7\x18\x0d\x40\x64\x77\xae\xcd\x53\x76\xc3\xea\x34\xaa\x45\x35\x9f\x71\x7a\x07\x52\x0d\x25\x87\xa7\x74\xbf\x06\xcd\xc8\xb1\x08\xa4\x28\x84\xca\xed\xa9\x7b\x34\x08\xa2\x5b\xcb\xf5\x7a\x8e\x11\xd2\x7d\xdf\x8e\x3d\x9b\xd6\xe7\xe5\x03\x91\x70\x71\xbf\x5a\x05\xcb\xf0\x41\x31\x70\x1d\xce\x6f\x3f\x59\x36\x72\x24\xb1\x92\xa9\x9f\x8c\x17\x77\xcb\x75\xb8\x9a\x2f\x96\x21\x6c\x76\x0f\xc6\x07\xb7\x11\x13\x51\x57\xe4\x9e\xf7\x99\x98\x56\x1b\xc3\x4f\xb3\xb6\x15\x7d\x23\xdc\xb7\xec\x58\xf7\x7c\xb3\x25\xb7\xfc\xaf\xa0\x35\x9a\x34\x9c\x9f\xcf\xd7\x41\xb3\xc5\xe8\x14\x21\x0f\xac\xb6\xc4\xab\xde\xe8\x75\xd3\x31\xf9\x85\xec\x89\x11\x98\xa8\xfe\x83\xe7\x60\x5e\x94\x9c\x09\xc8\x71\x4b\xf2\x98\xb2\x2d\x64\x39\xdf\xe6\x24\x4d\xd5\xdf\x94\x41\x70\x71\x3b\x5f\xeb\x43\x30\x55\x0a\xcc\xdf\x3f\xfe\xb2\x9e\xe9\xe9\x1c\x95\x02\xf6\x24\xa7\xbc\x10\x10\x53\x92\x60\x24\xc5\x8f\x34\xcd\x12\xd4\xc3\x55\xa3\x7c\x8a\x7f\x46\x49\xa1\xb5\xcf\x23\xb5\x64\x94\xcc\x7e\x98\x78\xdd\x28\xab\x06\x67\xb2\xba\x5f\x87\xca\xc9\xf9\x23\x2f\x24\xac\x0a\x21\x1b\x7e\x25\x84\x6d\x0b\xb2\xc5\xc1\xf3\x9f\x9e\xe5\x13\x67\x4a\x83\xf9\x0b\xa8\x00\x02\x69\x91\x48\xea\x67\x24\x27\x31\xdd\xa6\x1e\xc4\xcf\x8c\xa4\x34\x22\x49\xf2\xac\x47\xdb\xb1\x57\x89\x14\x79\xc6\x05\xf6\xda\xfc\x01\x06\xad\x5e\x73\x25\xa4\xac\x5e\x73\x6d\x91\x01\xcf\x90\x81\xe0\x45\x1e\xf5\x6b\x03\x51\x64\x7a\x54\x17\xc3\xe3\x33\x5c\x73\xbe\x4d\xfa\x6f\xf5\xd1\xfd\x7f\x00\x00\x00\xff\xff\xd8\x64\x7e\xe7\xc0\x20\x00\x00")

func _000001_init_schemaUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_init_schemaUpSql,
		"000001_init_schema.up.sql",
	)
}

func _000001_init_schemaUpSql() (*asset, error) {
	bytes, err := _000001_init_schemaUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_init_schema.up.sql", size: 8384, mode: os.FileMode(420), modTime: time.Unix(1664551464, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000001_init_schema.down.sql": _000001_init_schemaDownSql,
	"000001_init_schema.up.sql": _000001_init_schemaUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"000001_init_schema.down.sql": &bintree{_000001_init_schemaDownSql, map[string]*bintree{}},
	"000001_init_schema.up.sql": &bintree{_000001_init_schemaUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

