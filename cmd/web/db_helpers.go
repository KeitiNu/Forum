// Code generated by go-bindata.
// sources:
// db/migration/000001_init_schema.down.sql
// db/migration/000001_init_schema.up.sql
// db/migration/000002_init_schema.down.sql
// db/migration/000002_init_schema.up.sql
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000001_init_schemaDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\x2d\x4e\x2d\x8a\x2f\xa9\x2c\x48\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\xb6\xe6\x42\x92\x4f\x4e\x2c\x49\x4d\xcf\x2f\xca\x4c\x2d\xc6\xa1\x00\x64\x00\x2e\xb9\x82\xfc\xe2\x92\x62\x85\xcc\x34\x5c\x72\xf1\x99\x79\xf1\x50\x0b\x2a\x71\xd9\x9f\x9f\x9b\x9b\x9a\x57\x82\xcb\x86\xb2\xfc\x12\x5c\x2e\x4f\x4f\xcd\x4b\xc1\xe2\x37\x5d\x5d\x05\x24\x45\x45\xa9\x05\xf9\x45\x25\xb8\xe5\x4b\x0b\xd2\x8b\x12\x53\x52\xe3\x8b\x52\x0b\x4b\x53\x8b\x91\x14\x72\x01\x02\x00\x00\xff\xff\x07\x0d\x9b\xc8\x44\x01\x00\x00")

func _000001_init_schemaDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_init_schemaDownSql,
		"000001_init_schema.down.sql",
	)
}

func _000001_init_schemaDownSql() (*asset, error) {
	bytes, err := _000001_init_schemaDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_init_schema.down.sql", size: 324, mode: os.FileMode(420), modTime: time.Unix(1662298825, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000001_init_schemaUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x59\xcd\x72\xe3\xb8\x11\x3e\x8b\x4f\xd1\xd1\x49\xaa\x22\x77\xc7\xc9\x9e\x32\x87\x2d\xd9\xa6\x1d\xed\xda\xf2\x44\xa2\x53\xbb\x27\x15\x4c\xb6\x64\x44\x24\xc0\x10\xa0\x76\xf5\x3e\xf3\x0c\x39\xe5\xe6\x17\x4b\x01\x20\x45\xf0\x57\x96\xc7\x33\xe3\x93\x04\x34\xba\x1b\x5f\x7f\xdd\x6a\xb4\x3d\x0f\xae\x96\xfe\x2c\xf0\x21\x98\x5d\xde\xf9\x30\xbf\x81\xc5\x43\x00\xfe\x6f\xf3\x55\xb0\x82\x5c\x60\xb6\x96\x87\x14\x27\x8e\xe7\xc1\x68\x44\x23\xa0\x4c\xe2\x16\x33\xf8\xb4\x9c\xdf\xcf\x96\xbf\xc3\xaf\xfe\xef\xfa\xc4\xe2\xf1\xee\xce\x35\x52\x8c\x24\x08\x12\xff\x94\xf0\xb8\x98\xff\xf3\xd1\x6f\xee\x47\x28\xc2\x8c\xa6\x92\x72\xa6\xc5\xcc\xea\xf4\xa3\xe3\x9c\xf6\x06\xb4\x27\xaf\xf1\x43\x49\xf7\x7b\x02\x4a\x04\x13\x42\xe3\x9e\x7d\x2d\xf0\x4c\xc4\x33\x46\xeb\x94\x08\xf1\x07\xcf\x22\xb8\xbc\x7b\xb8\x6c\xe8\x90\x7c\x87\xac\x6b\x83\xe4\xf2\x79\x5d\xed\x6a\x9f\xd2\x8c\xef\x69\x84\x99\xb6\xe9\x82\xe7\xed\x72\x0a\x2f\xff\xdb\x09\x50\x50\xbc\x7c\xa6\x11\xca\x3c\x72\x21\x45\xf2\x04\x12\x29\x43\xd8\x11\xe0\x31\x26\xe4\x2f\x70\x4f\x05\x84\x9c\x09\x99\x11\xca\x24\xa4\x84\x31\xf2\xf3\xcf\x4a\x6d\x98\x21\x91\x18\x41\x44\x24\x4a\x9a\x60\x03\x88\x34\xaa\xed\xea\x45\x15\xd4\xb5\x05\x63\x79\x02\xae\xfd\x9b\xd9\xe3\x5d\x00\x17\x5a\xcc\xf3\xe0\x42\x79\xb3\x13\x20\x28\x15\xc6\x15\x60\x2f\xff\x05\x49\xf6\x44\x07\xc4\x03\x23\x28\xa4\x0b\x28\x41\xdd\x88\x0a\x04\xca\xd2\x5c\x52\x40\x0a\xca\x4f\xb7\x38\xce\x60\x4f\xe2\x1c\x15\x38\x3c\x21\x44\x0a\x8c\x25\x8c\x2f\xc6\x4a\xc5\xcd\xc3\xd2\x9f\xdf\x2e\x54\x24\x27\x85\x7b\x53\xb5\xae\xfe\x96\xfe\x8d\xbf\xf4\x17\x57\xbe\xcd\x49\x1a\x4d\xa1\x14\x50\x7f\x0f\x0b\xb8\xf6\xef\xfc\xc0\x87\x95\x1f\x1c\x2f\xe2\x79\xda\xa7\xe3\x31\xd8\xe5\x42\xe6\x52\xd9\x2e\xbc\x4a\xf2\x3c\x42\x49\x76\x02\x21\xc2\x0d\xc9\x63\x59\x78\x99\x22\x89\x51\x59\x50\xdc\x3c\x41\xce\x94\x0b\x79\x16\x37\xbb\xd0\x37\xa1\xa1\x32\x2e\x58\x5b\x5b\x0f\x39\x93\xc8\x64\xc7\x4e\x4c\x77\x28\x4a\x65\x7a\x25\xa2\xa2\xbd\x38\x4c\x13\x1b\xfe\xc2\xbf\x0a\xde\x06\xfe\x13\x2b\x34\x6d\xf4\xaf\x66\xab\xab\xd9\xb5\x5f\x22\xbf\x23\x22\x97\xe4\xdf\xe4\x08\xbc\x42\xda\x35\xdf\xf6\x24\x52\x0c\x97\x98\x90\x2d\x01\x81\x5c\xe6\x91\x86\x92\xca\x5c\x60\x54\x62\x6f\x98\x58\x43\x5f\x09\xad\x43\x22\x71\xcb\xb3\xc3\xa4\x90\x78\x0d\xf6\x9e\x07\x55\x59\x28\x77\x8a\x8d\xa9\xd3\x6f\x8b\xb2\xb7\x9a\x33\xc7\x7b\xa2\xad\xe2\x52\xa8\x1d\x92\xb1\xa3\x53\xe8\x9b\x16\x89\xd7\x0c\x90\x66\x62\x11\xa0\x53\x31\xea\x52\x6f\xb9\x33\x64\xa2\x42\xe3\x95\xb6\x2a\x8c\x3b\x20\x0e\x79\x92\x20\x93\xef\x8c\xec\x60\x9e\x0d\xa6\x54\x67\x56\xf5\x25\xd6\xc9\xdc\x1a\x4a\xaf\xe1\x0c\x3b\x19\x40\x3b\xcb\xc8\x59\x69\xb6\x33\x90\x13\x92\xd1\xe8\xeb\xb2\xac\x0c\x95\x4e\xea\xd2\xbf\x84\x0a\x8c\x6b\xce\x2a\x17\x5b\xbe\x0d\x67\xe6\x9e\x4b\x3c\x93\x33\xa7\x38\xd1\xe0\x54\x45\x15\xed\x51\xc7\x8e\xfe\x51\x79\xe2\x3c\xb6\x1a\x00\xcf\x83\x0d\x89\x05\x4e\x3e\x4c\x61\xc3\xb3\x92\x36\x40\x58\x04\x32\xcb\x71\x72\x61\xd6\x89\x66\xd9\x5b\x38\x54\xf9\xd3\x17\xa1\x32\xa5\xce\x62\x52\xc5\x89\x8e\x38\x15\x34\x2a\x62\xf4\xfc\xf2\xf9\xe5\x73\x8c\x43\xdc\x79\x87\x02\x75\x3e\x77\x06\xfc\x7a\xc7\xc4\x2b\xd9\xf8\x0f\xff\xea\xd7\xf2\xbe\x55\x17\x35\x5b\x5c\xd7\x18\x23\xcc\x72\x71\xe8\x61\x59\xb1\x4c\x74\x1e\x28\x15\x1d\x3d\xb5\x88\xa9\x38\x54\x89\xfe\x1d\x38\x8b\x0f\xc0\x19\x02\xdf\x80\x7c\x46\x81\x10\xf2\x38\xc9\x99\x6a\x6c\x84\x84\x27\x84\x0d\x8d\x2b\x3c\x7a\x32\x29\xc3\x94\x67\xef\x5d\x7f\x8d\x52\x93\x6f\xad\xda\x7b\x8a\xed\x24\x4a\x28\xeb\xc8\x37\x12\x86\x98\xaa\x93\x2a\xe7\x2a\x4b\x24\x6c\x35\xb9\x8d\xe8\x5b\xde\x7c\xb7\xd2\x4b\x88\x6e\xf1\x21\x23\xca\x97\xaf\x5d\x78\xdf\x90\x3d\x03\x8e\x95\x01\xf9\x22\xf0\x54\x6b\xae\x19\x5f\x46\xb8\x51\x68\x4c\x90\xf4\xc3\xe1\xe8\xe1\x30\x73\xf3\x74\x9b\x91\x08\xd7\x19\xfe\x27\x47\x71\x2e\x85\x8b\x53\x86\xa3\xad\x57\xa0\x7a\x24\x52\x15\x35\xe0\x71\x4c\x20\xa1\x32\x97\x4d\x83\xf4\x3b\x12\xba\xf2\xfd\xdb\x31\xfa\x49\xb1\xa5\x81\xc1\xf7\x63\x8b\x09\x41\x8d\x2e\x30\xd8\x69\x32\x2e\xe9\x86\x86\x44\x52\xce\xde\xb9\x75\x50\xdd\xc8\x59\xad\x83\x21\x7b\xc7\x46\x09\x6f\x7b\x47\x20\xb2\x7a\xb7\x71\x7c\xe9\xea\x8e\xe3\xdb\xf4\x0a\x1d\x46\x8a\xcb\xf7\x59\xd0\x9d\xda\x17\xa8\x3f\x42\xd5\x67\xa0\xf8\x01\xfb\x02\x13\x15\xe8\xbd\x9c\x35\x12\xe7\x1a\x31\x4d\x42\xc9\x8e\xbe\x26\x61\xbe\xaa\x96\x2b\x62\xd8\xab\x16\x2b\x8a\xe5\xaa\xa1\x28\xb5\xdb\xf2\x1d\x0d\xc5\xd7\xd1\xde\xed\x7a\xcd\xe6\xbb\x6b\xef\x71\xbd\xd5\x39\xa9\x5f\x8d\xd7\x8d\x38\x4f\x8f\x37\x87\x46\x9b\xed\xb1\xe6\xf4\xe3\xa0\xe5\xe2\xfd\x4c\x51\xc0\xc4\x19\x99\xa9\x4f\xe0\xff\x16\x74\xda\x2e\xec\x35\xcc\x68\x71\xcb\x85\xf2\x27\xe8\x7a\x16\xf8\xc1\xfc\xde\x3f\xe5\xc2\x16\x59\x54\x8e\xc5\xbe\xce\xfd\xe7\x8b\x95\xbf\x0c\x60\xbe\x08\x1e\xea\xd6\x68\xe4\xea\x39\xcc\xd4\xf9\xd7\xec\xee\xd1\x5f\xc1\xe4\x83\x0b\xe3\x1b\x4c\x48\x8c\xe3\xa9\xeb\x4c\x2e\x5c\x18\xdf\x97\x5f\xfe\xea\xc2\x78\xc1\x99\x77\x49\x19\xc9\x0e\x7a\xe9\x6f\x2e\x8c\x1f\xd9\x8e\xf1\x3f\x98\xfe\xfe\x93\xfe\x1e\xe1\x86\x32\x8c\xc6\x27\x2e\xae\xa2\xae\x61\x3f\x4e\x89\x87\x41\xdf\x70\x23\x55\x03\xfc\x58\x78\xc7\xc5\xf6\xd8\x75\x46\x22\x1f\x94\x2c\xb6\x95\x24\xd9\x62\xff\xf8\xf5\x83\xeb\x8c\x0a\xbc\x86\xa6\xb4\x3f\xb9\x23\x67\x64\xc6\xd8\x75\x83\x47\xcf\x87\x47\xd8\xce\xa8\x6b\x7e\xdd\x26\x92\xeb\x8c\xca\x31\xb2\xb5\x64\x17\xcf\xa3\xb3\x53\x67\x34\xb2\x4a\xa6\x15\x74\x33\xb0\x1d\x8d\x46\x6f\x1b\xd4\x9e\x22\xb3\xea\x73\x45\x41\xe3\xf9\x22\xf0\x6f\xfd\xa5\x1d\x55\xb7\x96\x63\xf6\x5d\x8b\x21\x50\x73\x5d\x55\x25\x51\x6a\xea\xc6\x84\x26\x64\x8b\x22\x0b\xf5\x59\xd7\xb0\xa9\xa5\xc7\x42\x09\xf4\x0b\x74\xda\x6c\x83\x84\x59\x37\xe9\xf0\x8a\x5b\x1e\x47\x6f\x83\xb7\x2d\x1f\x67\xd6\x0d\xac\x41\x63\xe1\x71\xcd\xb9\xda\xe4\xcf\xee\x0e\xac\x4a\xa5\x31\x9c\x36\x0e\x1e\x9f\x2c\x8d\x77\x8a\x00\xfd\x53\xa9\xc7\xe7\x43\x95\xd0\xd4\xfa\xe1\xe0\x35\xae\x63\x23\x5c\xf6\x65\xef\x18\xd9\x56\xd0\x9a\xd7\x6b\xc5\xed\x6c\x44\x06\x00\x31\x63\xad\x57\xd4\xe3\xe6\x03\xdc\x2e\x1f\xed\xb6\xb3\xb6\x7d\x1c\x5b\x59\x00\x74\x3c\x5d\x8e\xe0\x36\x66\xa4\xdd\x08\xd5\x73\x5f\x63\xd4\x03\x91\xdd\x94\xd6\x4f\xd9\xbd\xe8\xa8\x56\x2d\xca\xd1\xcb\xa8\x73\xd6\x54\x53\x72\x7c\x25\x77\x6b\x38\x81\x7f\x82\x42\xa8\xcc\x9e\x38\x27\x43\x20\xda\x45\x5a\xaf\x67\x18\x22\xdd\x77\xed\xd8\x43\x67\x7d\x5e\xae\x89\x84\xab\xc7\xe5\xd2\x5f\x04\x6b\xc5\xbf\x55\x30\xbb\xff\x64\xd9\xc8\x90\x44\x4a\xa6\x7a\x0b\x5e\x3d\x2c\x56\xc1\x72\x36\x5f\x04\xb0\xd9\xad\x8d\x0f\x4e\x2d\x22\xa2\xaa\xc7\x7d\x0f\xaf\xe1\x27\x57\xd3\x88\xbe\x10\xee\x1b\x66\xac\x6b\xbe\xd5\x90\x53\xfc\x87\x67\x85\x26\x05\x67\x97\xb3\x95\x5f\xef\x1c\x5a\x05\xc8\x05\xab\xdb\x70\xcb\xa7\x77\xd5\x4b\x8c\x7f\x21\x7b\x62\x04\xc6\xaa\xad\xe0\x19\x98\x87\x22\x67\x02\x32\xdc\x92\x2c\xa2\x6c\x0b\x69\xc6\xb7\x19\x49\x12\xf5\x99\x32\xf0\xaf\xee\x67\x2b\x7d\x08\x26\x4a\x81\xf9\xfc\xe3\x2f\xab\xa9\x1e\xba\x51\x29\x60\x4f\x32\xca\x73\x01\x11\x25\x31\x86\x52\xfc\x48\x93\x34\x46\x3d\x33\x35\xca\x27\xf8\x67\x18\xe7\x5a\xfb\x2c\x54\x4b\x46\xc9\xf4\x87\xb1\xdb\x8e\xb1\xea\x5b\xc6\xcb\xc7\x55\xa0\x9c\x9c\x3d\xf1\x5c\xc2\x32\x17\xb2\xe6\x57\x4c\xd8\x36\x27\x5b\xec\x3d\xff\xe9\x20\x9f\x39\x53\x1a\xcc\x27\xa0\x02\x08\x24\x79\x2c\xa9\x97\x92\x8c\x44\x74\x9b\xb8\x10\x1d\x18\x49\x68\x48\xe2\xf8\xa0\x27\xd6\x91\x5b\x8a\xe4\x59\xca\x05\x76\xda\xfc\x01\x7a\xad\xde\x72\x25\xa4\xac\xde\x72\x6d\x91\x01\x4f\x91\x81\xe0\x79\x16\x76\x6b\x03\x91\xa7\x7a\x02\x17\xc1\xd3\x01\x6e\x39\xdf\xc6\xdd\xb7\xfa\xe8\xfc\x3f\x00\x00\xff\xff\xb8\xb8\xe3\xd5\x97\x20\x00\x00")

func _000001_init_schemaUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_init_schemaUpSql,
		"000001_init_schema.up.sql",
	)
}

func _000001_init_schemaUpSql() (*asset, error) {
	bytes, err := _000001_init_schemaUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_init_schema.up.sql", size: 8343, mode: os.FileMode(420), modTime: time.Unix(1662301431, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000002_init_schemaDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _000002_init_schemaDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_init_schemaDownSql,
		"000002_init_schema.down.sql",
	)
}

func _000002_init_schemaDownSql() (*asset, error) {
	bytes, err := _000002_init_schemaDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_init_schema.down.sql", size: 0, mode: os.FileMode(420), modTime: time.Unix(1662301415, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000002_init_schemaUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _000002_init_schemaUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_init_schemaUpSql,
		"000002_init_schema.up.sql",
	)
}

func _000002_init_schemaUpSql() (*asset, error) {
	bytes, err := _000002_init_schemaUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_init_schema.up.sql", size: 0, mode: os.FileMode(420), modTime: time.Unix(1662301423, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000001_init_schema.down.sql": _000001_init_schemaDownSql,
	"000001_init_schema.up.sql": _000001_init_schemaUpSql,
	"000002_init_schema.down.sql": _000002_init_schemaDownSql,
	"000002_init_schema.up.sql": _000002_init_schemaUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"000001_init_schema.down.sql": &bintree{_000001_init_schemaDownSql, map[string]*bintree{}},
	"000001_init_schema.up.sql": &bintree{_000001_init_schemaUpSql, map[string]*bintree{}},
	"000002_init_schema.down.sql": &bintree{_000002_init_schemaDownSql, map[string]*bintree{}},
	"000002_init_schema.up.sql": &bintree{_000002_init_schemaUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

