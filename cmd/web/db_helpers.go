// Code generated by go-bindata.
// sources:
// db/migration/000001_init_schema.down.sql
// db/migration/000001_init_schema.up.sql
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000001_init_schemaDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\x2d\x4e\x2d\x8a\x2f\xa9\x2c\x48\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\xb6\xe6\x42\x92\x4f\x4e\x2c\x49\x4d\xcf\x2f\xca\x4c\x2d\xc6\xa1\x00\x64\x00\x2e\xb9\x82\xfc\xe2\x92\x62\x85\xcc\x34\x5c\x72\xf1\x99\x79\xf1\x50\x0b\x2a\x71\xd9\x9f\x9f\x9b\x9b\x9a\x57\x82\xcb\x86\xb2\xfc\x12\x5c\x2e\x4f\x4f\xcd\x4b\xc1\xe2\x37\x5d\x5d\x05\x24\x45\x45\xa9\x05\xf9\x45\x25\xb8\xe5\x4b\x0b\xd2\x8b\x12\x53\x52\xe3\x8b\x52\x0b\x4b\x53\x8b\x91\x14\x72\x01\x02\x00\x00\xff\xff\x07\x0d\x9b\xc8\x44\x01\x00\x00")

func _000001_init_schemaDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_init_schemaDownSql,
		"000001_init_schema.down.sql",
	)
}

func _000001_init_schemaDownSql() (*asset, error) {
	bytes, err := _000001_init_schemaDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_init_schema.down.sql", size: 324, mode: os.FileMode(420), modTime: time.Unix(1662298825, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000001_init_schemaUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x59\xcd\x72\xe3\xb8\x11\x3e\x8b\x4f\xd1\xd1\x49\xaa\x22\x77\xc7\xc9\x9e\x32\x87\x2d\xd9\xa6\x1d\xed\xda\xf2\x44\xa2\x53\xbb\x27\x15\x4c\xb6\x64\x44\x24\xc0\x10\xa0\x76\xf5\x3e\xf3\x0c\x39\xe5\xe6\x17\x4b\x01\x20\x45\xf0\x57\x96\xc7\xf3\x73\xb2\x80\x46\x77\xe3\xeb\xaf\x9b\x8d\x1e\xcf\x83\xab\xa5\x3f\x0b\x7c\x08\x66\x97\x77\x3e\xcc\x6f\x60\xf1\x10\x80\xff\xdb\x7c\x15\xac\x20\x17\x98\xad\xe5\x21\xc5\x89\xe3\x79\x30\x1a\xd1\x08\x28\x93\xb8\xc5\x0c\x3e\x2d\xe7\xf7\xb3\xe5\xef\xf0\xab\xff\xbb\x3e\xb1\x78\xbc\xbb\x73\x8d\x14\x23\x09\x82\xc4\x3f\x25\x3c\x2e\xe6\xff\x7c\xf4\x9b\xfb\x11\x8a\x30\xa3\xa9\xa4\x9c\x69\x31\xb3\x3a\xfd\xe8\x38\xa7\xbd\x01\xed\xc9\x6b\xfc\x50\xd2\xfd\x9e\x80\x12\xc1\x84\xd0\xb8\x67\x5f\x0b\x3c\x13\xf1\x8c\xd1\x3a\x25\x42\xfc\xc1\xb3\x08\x2e\xef\x1e\x2e\x1b\x3a\x24\xdf\x21\xeb\xda\x20\xb9\x7c\x5e\x57\xbb\xda\xa7\x34\xe3\x7b\x1a\x61\xa6\x6d\xba\xe0\x79\xbb\x9c\xc2\xcb\xff\x76\x02\x14\x14\x2f\x9f\x69\x84\x32\x8f\x5c\x48\x91\x3c\x81\x44\xca\x10\x76\x04\x78\x8c\x09\xf9\x0b\xdc\x53\x01\x21\x67\x42\x66\x84\x32\x09\x29\x61\x8c\xfc\xfc\xb3\x52\x1b\x66\x48\x24\x46\x10\x11\x89\x92\x26\xd8\x00\x22\x8d\x6a\xbb\x7a\x51\x05\x75\x6d\xc1\x58\x9e\x80\x6b\xff\x66\xf6\x78\x17\xc0\x85\x16\xf3\x3c\xb8\x50\xde\xec\x04\x08\x4a\x85\x71\x05\xd8\xcb\x7f\x41\x92\x3d\xd1\x01\xf1\xc0\x08\x0a\xe9\x02\x4a\x50\x37\xa2\x02\x81\xb2\x34\x97\x14\x90\x82\xf2\xd3\x2d\x8e\x33\xd8\x93\x38\x47\x05\x0e\x4f\x08\x91\x02\x63\x09\xe3\x8b\xb1\x52\x71\xf3\xb0\xf4\xe7\xb7\x0b\x15\xc9\x49\xe1\xde\x54\xad\xab\x7f\x4b\xff\xc6\x5f\xfa\x8b\x2b\xdf\xe6\x24\x8d\xa6\x50\x0a\xa8\x7f\x0f\x0b\xb8\xf6\xef\xfc\xc0\x87\x95\x1f\x1c\x2f\xe2\x79\xda\xa7\xe3\x31\xd8\xe5\x42\xe6\x52\xd9\x2e\xbc\x4a\xf2\x3c\x42\x49\x76\x02\x21\xc2\x0d\xc9\x63\x59\x78\x99\x22\x89\x51\x59\x50\xdc\x3c\x41\xce\x94\x0b\x79\x16\x37\xbb\xd0\x37\xa1\xa1\x32\x2e\x58\x5b\x5b\x0f\x39\x93\xc8\x64\xc7\x4e\x4c\x77\x28\x4a\x65\x7a\x25\xa2\xa2\xbd\x38\x4c\x13\x1b\xfe\xc2\xbf\x0a\xde\x06\xfe\x13\x2b\x34\x6d\xf4\xaf\x66\xab\xab\xd9\xb5\x5f\x22\xbf\x23\x22\x97\xe4\xdf\xe4\x08\xbc\x42\xda\x35\xbf\xf6\x24\x52\x0c\x97\x98\x90\x2d\x01\x81\x5c\xe6\x91\x86\x92\xca\x5c\x60\x54\x62\x6f\x98\x58\x43\x5f\x09\xad\x43\x22\x71\xcb\xb3\xc3\xa4\x90\x78\x0d\xf6\x9e\x07\x55\x59\x28\x77\x8a\x8d\xa9\xd3\x6f\x8b\xb2\xb7\x9a\x33\xc7\x7b\xa2\xad\xe2\x52\xa8\x1d\x92\xb1\xa3\x53\xe8\x9b\x16\x89\xd7\x0c\x90\x66\x62\x11\xa0\x53\x31\xea\x52\x6f\xb9\x33\x64\xa2\x42\xe3\x95\xb6\x2a\x8c\x3b\x20\x0e\x79\x92\x20\x93\xef\x8c\xec\x60\x9e\x0d\xa6\x54\x67\x56\xf5\x25\xd6\xc9\xdc\x1a\x4a\xaf\xe1\x0c\x3b\x19\x40\x3b\xcb\xc8\x59\x69\xb6\x33\x90\x13\x92\xd1\xe8\xeb\xb2\xac\x0c\x95\x4e\xea\xd2\xbf\x84\x0a\x8c\x6b\xce\x2a\x17\x5b\xbe\x0d\x67\xe6\x9e\x4b\x3c\x93\x33\xa7\x38\xd1\xe0\x54\x45\x15\xed\x51\xc7\x8e\xfe\xa8\x3c\x71\x1e\x5b\x0d\x80\xe7\xc1\x86\xc4\x02\x27\x1f\xa6\xb0\xe1\x59\x49\x1b\x20\x2c\x02\x99\xe5\x38\xb9\x30\xeb\x44\xb3\xec\x2d\x1c\xaa\xfc\xe9\x8b\x50\x99\x52\x67\x31\xa9\xe2\x44\x47\x9c\x0a\x1a\x15\x31\x7a\x7e\xf9\xfc\xf2\x39\xc6\x21\xee\xbc\x43\x81\x3a\x9f\x3b\x03\x7e\xbd\x63\xe2\x95\x6c\xfc\x87\x7f\xf5\x6b\x79\xdf\xaa\x8b\x9a\x2d\xae\x6b\x8c\x11\x66\xb9\x38\xf4\xb0\xac\x58\x26\x3a\x0f\x94\x8a\x8e\x9e\x5a\xc4\x54\x1c\xaa\x44\xff\x0e\x9c\xc5\x07\xe0\x0c\x81\x6f\x40\x3e\xa3\x40\x08\x79\x9c\xe4\x4c\x35\x36\x42\xc2\x13\xc2\x86\xc6\x15\x1e\x3d\x99\x94\x61\xca\xb3\xf7\xae\xbf\x46\xa9\xc9\xb7\x56\xed\x3d\xc5\x76\x12\x25\x94\x75\xe4\x1b\x09\x43\x4c\xd5\x49\x95\x73\x95\x25\x12\xb6\x9a\xdc\x46\xf4\x2d\x6f\xbe\x5b\xe9\x25\x44\xb7\xf8\x90\x11\xe5\xcb\xd7\x2e\xbc\x6f\xc8\x9e\x01\xc7\xca\x80\x7c\x11\x78\xaa\x35\xd7\x8c\x2f\x23\xdc\x28\x34\x26\x48\xfa\xe1\x70\xf4\x70\x98\xb9\x79\xba\xcd\x48\x84\xeb\x0c\xff\x93\xa3\x38\x97\xc2\xc5\x29\xc3\xd1\xd6\x2b\x50\x3d\x12\xa9\x8a\x1a\xf0\x38\x26\x90\x50\x99\xcb\xa6\x41\xfa\x1d\x09\x5d\xf9\xfe\xed\x18\xfd\xa4\xd8\xd2\xc0\xe0\xfb\xb1\xc5\x84\xa0\x46\x17\x18\xec\x34\x19\x97\x74\x43\x43\x22\x29\x67\xef\xdc\x3a\xa8\x6e\xe4\xac\xd6\xc1\x90\xbd\x63\xa3\x84\xb7\xbd\x23\x10\x59\xbd\xdb\x38\xbe\x74\x75\xc7\xf1\x6d\x7a\x85\x0e\x23\xc5\xe5\xfb\x2c\xe8\x4e\xed\x0b\xd4\x1f\xa1\xea\x33\x50\x7c\xc0\xbe\xc0\x44\x05\x7a\x2f\x67\x8d\xc4\xb9\x46\x4c\x93\x50\xb2\xa3\xaf\x49\x98\xaf\xaa\xe5\x8a\x18\xf6\xaa\xc5\x8a\x62\xb9\x6a\x28\x4a\xed\xb6\x7c\x47\x43\xf1\x75\xb4\x77\xbb\x5e\xb3\xf9\xee\xda\x7b\x5c\x6f\x75\x4e\xea\xab\xf1\xba\x11\xe7\xe9\xf1\xe6\xd0\x68\xb3\x3d\xd6\x9c\x7e\x1c\xb4\x5c\xbc\x9f\x29\x0a\x98\x38\x23\x33\xf5\x09\xfc\xdf\x82\x4e\xdb\x85\xbd\x86\x19\x2d\x6e\xb9\x50\x7e\x82\xae\x67\x81\x1f\xcc\xef\xfd\x53\x2e\x6c\x91\x45\xe5\x58\xec\xeb\xdc\x7f\xbe\x58\xf9\xcb\x00\xe6\x8b\xe0\xa1\x6e\x8d\x46\xae\x9e\xc3\x4c\x9d\x7f\xcd\xee\x1e\xfd\x15\x4c\x3e\xb8\x30\xbe\xc1\x84\xc4\x38\x9e\xba\xce\xe4\xc2\x85\xf1\x7d\xf9\xe3\xaf\x2e\x8c\x17\x9c\x79\x97\x94\x91\xec\xa0\x97\xfe\xe6\xc2\xf8\x91\xed\x18\xff\x83\xe9\xdf\x3f\xe9\xdf\x11\x6e\x28\xc3\x68\x7c\xe2\xe2\x2a\xea\x1a\xf6\xe3\x94\x78\x18\xf4\x0d\x37\x52\x35\xc0\x8f\x85\x77\x5c\x6c\x8f\x5d\x67\x24\xf2\x41\xc9\x62\x5b\x49\x92\x2d\xf6\x8f\x5f\x3f\xb8\xce\xa8\xc0\x6b\x68\x4a\xfb\x93\x3b\x72\x46\x66\x8c\x5d\x37\x78\xf4\x7c\x78\x84\xed\x8c\x38\x8b\x29\x3b\xe1\x48\xd7\x8c\xbb\x4d\x36\xd7\x19\x95\xa3\x66\x6b\xc9\x2e\xb0\xc7\x0b\x4d\x9d\xd1\xc8\x2a\xab\x16\x31\xcc\x50\x77\x34\x1a\xbd\x6d\x98\x7b\x8a\xf0\xaa\x17\x16\x05\xd5\xe7\x8b\xc0\xbf\xf5\x97\x76\xe4\xdd\x5a\x1e\xda\x77\x2d\x06\x45\xcd\x75\x55\xb9\x44\xa9\xa9\x1b\x13\x9a\x90\x2d\x8a\x2c\xd4\x67\x5d\xc3\xb8\x96\x1e\x0b\x25\xd0\xaf\xd4\x69\xb3\x55\x12\x66\xdd\xa4\xcc\x2b\x6e\x79\x1c\xcf\x0d\xde\xb6\x7c\xc0\x59\x37\xb0\x86\x91\x85\xc7\x35\xe7\x6a\xd3\x41\xbb\x83\xb0\xaa\x99\xc6\x70\xda\x38\x78\x7c\xd6\x34\xde\x32\x02\xf4\xe7\x54\x8f\xd8\x87\xaa\xa5\xf9\x1e\x0c\x07\xaf\x71\x1d\x1b\xe1\xb2\x77\x7b\xc7\xc8\xb6\x82\xd6\xbc\x5e\x2b\x6e\x67\x23\x32\x00\x88\x19\x7d\xbd\xa2\x66\x37\x1f\xe9\x76\x66\xb7\x5b\xd3\x7a\xe2\x97\xa3\x2d\x0b\x80\x8e\xe7\xcd\x11\xdc\xc6\x1c\xb5\x1b\xa1\x7a\xee\x6b\x8c\x7a\x20\xb2\x1b\xd7\xfa\x29\xbb\x5f\x1d\xd5\xaa\x45\x39\x9e\x19\x75\xce\xa3\x6a\x4a\x8e\x2f\xe9\x6e\x0d\x9a\x91\x43\x11\x48\x50\x08\x95\xdb\x13\xe7\x64\x10\x44\xbb\x94\xeb\xf5\x0c\x43\xa4\xfb\xae\x1d\x7b\x34\xad\xcf\xcb\x35\x91\x70\xf5\xb8\x5c\xfa\x8b\x60\xad\x18\xb8\x0a\x66\xf7\x9f\x2c\x1b\x19\x92\x48\xc9\x54\x2f\xc6\xab\x87\xc5\x2a\x58\xce\xe6\x8b\x00\x36\xbb\xb5\xf1\xc1\xa9\xc5\x44\x54\x15\xb9\xe3\x79\x26\x26\xe5\x46\xff\xcb\xac\x69\x45\xdf\x08\xf7\x0d\x3b\xd6\x3d\xdf\x6c\xc9\x29\xfe\x27\x68\x85\x26\x0d\x67\x97\xb3\x95\x5f\xef\x30\x5a\x45\xc8\x05\xab\x2b\x71\xcb\x27\x7a\xd5\x73\x8c\x7f\x21\x7b\x62\x04\xc6\xaa\xfd\xe0\x19\x98\x07\x25\x67\x02\x32\xdc\x92\x2c\xa2\x6c\x0b\x69\xc6\xb7\x19\x49\x12\xf5\x37\x65\xe0\x5f\xdd\xcf\x56\xfa\x10\x4c\x94\x02\xf3\xf7\x8f\xbf\xac\xa6\x7a\x38\x47\xa5\x80\x3d\xc9\x28\xcf\x05\x44\x94\xc4\x18\x4a\xf1\x23\x4d\xd2\x18\xf5\x6c\xd5\x28\x9f\xe0\x9f\x61\x9c\x6b\xed\xb3\x50\x2d\x19\x25\xd3\x1f\xc6\x6e\x3b\xca\xaa\xbf\x19\x2f\x1f\x57\x81\x72\x72\xf6\xc4\x73\x09\xcb\x5c\xc8\x9a\x5f\x31\x61\xdb\x9c\x6c\xb1\xf7\xfc\xa7\x83\x7c\xe6\x4c\x69\x30\x7f\x01\x15\x40\x20\xc9\x63\x49\xbd\x94\x64\x24\xa2\xdb\xc4\x85\xe8\xc0\x48\x42\x43\x12\xc7\x07\x3d\xd9\x8e\xdc\x52\x24\xcf\x52\x2e\xb0\xd3\xe6\x0f\xd0\x6b\xf5\x96\x2b\x21\x65\xf5\x96\x6b\x8b\x0c\x78\x8a\x0c\x04\xcf\xb3\xb0\x5b\x1b\x88\x3c\xd5\x93\xba\x08\x9e\x0e\x70\xcb\xf9\x36\xee\xbe\xd5\x47\xe7\xff\x01\x00\x00\xff\xff\x3c\x3c\x0f\x22\xbf\x20\x00\x00")

func _000001_init_schemaUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_init_schemaUpSql,
		"000001_init_schema.up.sql",
	)
}

func _000001_init_schemaUpSql() (*asset, error) {
	bytes, err := _000001_init_schemaUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_init_schema.up.sql", size: 8383, mode: os.FileMode(420), modTime: time.Unix(1662576240, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000001_init_schema.down.sql": _000001_init_schemaDownSql,
	"000001_init_schema.up.sql": _000001_init_schemaUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"000001_init_schema.down.sql": &bintree{_000001_init_schemaDownSql, map[string]*bintree{}},
	"000001_init_schema.up.sql": &bintree{_000001_init_schemaUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

